***************************************************	SOME KEYWORDS	**************************************************
1) auto -> The auto keyword specifies that the type of the variable that is being declared will be automatically deducted from its initializer. In case of functions, if their return type is auto then that will be evaluated by return type expression at runtime.
	auto x = 4; 
    	auto y = 3.37; 
    	auto ptr = &x; 
    	cout << typeid(x).name() << endl 
         << typeid(y).name() << endl 
         << typeid(ptr).name() << endl;
	output -> 
	i
	d
	Pi
2) decltype -> It inspects the declared type of an entity or the type of an expression. Auto lets you declare a variable with particular type whereas decltype lets you extract the type from the variable so decltype is sort of an operator that evaluates the type of passed expression.
	// Data type of x is same as return type of fun1() 
    // and type of y is same as return type of fun2() 
    decltype(fun1()) x; 
    decltype(fun2()) y;
3)size() returns no of elements excluding the free spaces	-----(in vectors)
4) Array:--
	include<array>
	array<int,4> a;
	a.at(2); a[2]; a.front(); a.back(); a.fill(5); a.swap(b);  { where b is of same size and type as a}
	a.size(); // in array size will forever give the declared size of array no matter whether all places are filled or not
5) Pair:--
	its not a container class, but a standard class therefore we can use it by simply writing 'using namespace std;'
	pair<string, int> p1 = {"Tanishq", 88}; // cant do like this
	pair<string, int> p1 = make_pair("Tanishq", 88); // this the correct way
	p1.first; p1.second;	
	we can compare two pairs using >, <, ==, etc
6) Tuple:--
	same as pair but we need to include header #include<tuple>
	make_tuple();
	get<0>(t1); // to get first value, similarly use 1 and 2 for second and third value respectively
7) Vectors:--
	vector<int> v {1,2,3};
	vector<string> v(5);
	vector<string> v(5,"Tan");
	relational operators like <,>,==,etc also works on vectors;
	v[0];
	v.push_back(5);
	v.capacity();	// total size of vector like 16
	v.pop_back();
	v.size(); 	// total no of elements filled
	v.clear();
	v.at(3);
	v.front();	v.back();
	vector<int>::iterator it = v.begin();
	vector<int> :: iterator it2 = v.end();
	v.insert(it+2, 3);
	auto it = lower_bound(v.begin(), v.end(), 11)	// this will give first repeting 11
	copy(v.begin(), v.end(), v2.begin());
8) Algorithm:--
	bool present = binary_search(v.begin(), v.end(), 5);
	sort(v.begin(), v.end(), f);	// where f is a user defined function(data type bool) which simply returns x < y i.e in Ascending order, i.e swaps for false value of f()

9) Set:--
	set<int,greater<int>> s;	// greater will sort in reverse order
	s.insert(5);	// by default it maintains ascending order
	auto it = s.find(5) // gives iterator to that else s.end()
	auto it = s.lower_bound(-1);	if a lower bound or upper bound is not found than it returns an iterator to the next position
	s.erase(5);
10) Map:--
	map<int , int> m;
	m[2] = 100;
	m.find(2) ;
	m.erase(2);
	m.add(2,18);
11) Stack:--
	stack<int> s;
	st.push(5)
	st.pop()
	int a = st.top()
	